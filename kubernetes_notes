//Cluster & Nodes
#kubectl cluster-info

#kubectl get nodes

#kubectl get all //Will list all the objects: pods, replicasets, deployments,...
===============================================================================================
//Pods
#kubectl run <pod_name> --image <image_name> //By default dockerhub is the default registry. Will create a pod, replicaset and deployment by default

#kubectl create -f <pod_definition_file> = #kubectl apply -f <pod_definition_file> //To create a pod using the definition file

#kubectl apply -f <pod_definition_file> //Can be also used to update the pod if the definition file is updated

#kubectl describe pod <pod_name>

#kubectl get pods

#kubectl get pods -o wide //To list pods along with the pod ip address and the hosting node.

#kubectl delete pod <pod_name>

#kubectl run <pod_name> --image <image_name> --dry-run=client -o yaml > <pod_definition_file>	//This will create a pod definition file based on the command and will not create a pod (Dry Run)
===============================================================================================
//Replication Controller & Replica Set

#kubectl create -f <RC_definition_file> = #kubectl apply -f <RC_definition_file> //To create a RecplicationController/ReplicaSet using the definition file

//To update the replica number
#kubectl replace -f <updated_RC_definition_file>	//To replace the replicaset definition file
#kubectl scale --replica=<#_of_replicas> -f <updated_RC_definition_file> 
#kubectl scale --replica=<#_of_replicas> replicaset <scaleset_name> //Will not update the file
#kubectl edit replicaset <replicaset_name> //Will open the replicaset running configurations file in a text editor format. This is different from the original definition file
                                            //And changes will be applied immedietly after uodating and closing the file.


#kubectl get replicationcontroller

#kubectl get replicaset = #kubectl get rs

#kubectl get rs <replicaset_name> --show-labels

#kubectl describe replicaset <replicaset_name>

#kubectl delete replicaset <replicaset_name> //Deletes the replicaset along with the underlying pods
===============================================================================================
Deployments

#kubectl get deployments = #kubectl get deploy

#kubectl create -f <deployment_definition_file> --record //Create the deployment, replicaset and pods
#kubectl create deployment <deployment_name> --image=<image_name>

//--record will record the create/apply/edit commands in the history

#kubectl delete deployment <deployment_name>

#kubectl describe deployemnts 

#kubectl rollout status <deployment_name> //Will show deployment events

#kubectl rollout history <deployment_name>  //Will show the deployments versions

//Rolling Updates
#kubectl apply -f <updated_deployment_definition_file> --record
#kubectl set image <deployment_name> <image_name:tag> --record  //The deployment definition file will be different from the running configurations.
#kubectl edit deployment <deployment_name>  --record   //Will open the deployment running configurations file in a text editor format. This is different from the original definition file
                                            //And changes will be applied immedietly after uodating and closing the file.


//Rollback
#kubectl rollout undo <deployment_name> --record
===============================================================================================
//Services

#kubectl create -f <service_definition_file>

#kubectl get svc = #kubectl get services

#kubectl get pods,svc,deployments
===============================================================================================
//Namespaces & Compute Quota

#kubectl get pod --namespace=<ns_name>

#kubectl create -f <pod_definition_file> --namespace=<ns_name>

#kubectl create namespace <ns_name>

#kubectl get pods --all-namespaces

#kubectl create -f <compute_quota_definition_file>
===============================================================================================
//Env Variable

//ConfigMap
#kubectl create -f <configmap_definition_file>

#kubectl get configmaps

#kubectl describe configmaps

#kubectl create configmap <congfigmap_name> --from-literal=<key>=<value>

#kubectl create configmap <congfigmap_name> --from-file=<configmap_file>

//Secrets
#kubectl create -f <secret_definition_file>

#kubectl create secret generic <secret_name> --from-literal=<key>=<value>

#kubectl create secret generic <secret_name> --from-file=<secret_file>

#kubectl get secrets

#kubectl describe secrets //You will see the encoded values

#kubectl describe secret <secret_name> -o yaml

//To get the encoded format of a secret:
echo -n "secret" | base64
===============================================================================================
//Persistent Volume & Claims & Storage Classes

#kubectl create -f <pv_definition_file>

#kubectl create -f <pvc_definition_file>

#kubectl get persistentvolume

#kubectl get pvc = #kubectl get persistentvolumeclaim 

#kubectl get sc = #kubectl get storageclass

===============================================================================================
ETCD

#etcdctl version

#etcdctl put <key> <value>

#etcdctl get <key>

#export ETCDCTL_API=3 //To set the etcd API version, by default it will be 2.

#kubectl get pods -n kube-system	//To list all pods that are created for internal K8s usage: etcd, controller, scheduler,.. in kubeadm setups

#ls /etc/kubernetes/manifests/	//To list all the manifest files for internal kubernetes components: etcd, controller, scheduler,.. in kubeadm setups
